digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
number = digit, { digit } ;

letter = "a" | "b" | "c" | ... | "z" | "A" | "B" | ... | "Z" ;
identifier = letter, { letter | digit } ;

char = "'", letter | digit | special_character, "'" ;
string = '"', { letter | digit | special_character | whitespace }, '"' ;
special_character = "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "(" | ")" | "-" | "_" | "=" | "+" | "[" | "]" | "{" | "}" | ";" | ":" | "," | "." | "<" | ">" | "/" | "?" | "\\" | "|" | "~" ;

whitespace = " " | "\t" | "\n" | "\r" ;
comment = "//", { any_character }, "\n" | "/*", { any_character }, "*/" ;

any_character = ? any valid character ? ;

expression = term, { ("+" | "-" | arithmetic_operator | comparison_operator | logical_operator | bitwise_operator | assignment_operator), term } ;
term = factor, { ("*" | "/" | "%" | arithmetic_operator), factor } ;
factor = number | identifier | "(", expression, ")" ;

arithmetic_operator = "+" | "-" | "*" | "/" | "%" | "++" | "--" ;
comparison_operator = "==" | "!=" | ">" | "<" | ">=" | "<=" | "===" | "!==" ;
logical_operator = "&&" | "||" | "!" ;
bitwise_operator = "&" | "|" | "^" | "~" | "<<" | ">>" | ">_<";
assignment_operator = "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "&=" | "|=" | "^=" | "<<=" | ">>=" ;


assignment = identifier, "=", expression, ";" ;
function_call_colon = identifier, ":", [ argument_list ], ":" ;
function_call_paren = identifier, "(", [ argument_list ], ")", ";" ;
argument_list = expression, { ",", expression } ;

if_statement = "if", condition, block ;
condition = "(", expression, ")" | ":", expression, ":" | ":", expression ;
block = "{", statements, "}" | statement ;

other_statement = "return", expression, ";" | "while", condition, block ;

statements = { statement } ;
statement = assignment | function_call_colon | function_call_paren | if_statement | other_statement ;

function_definition = "~", [ access_modifier ], [ function_modifier ], return_type, identifier, parameter_list, block ;
access_modifier = "public" | "private" | "protected" ;
function_modifier = "abstract" | "virtual" ;
return_type = "void" | "int" | "bool" | identifier ;
parameter_list = "(", [ parameters ], ")" | ":", [ parameters ], ":" | ":" ;
parameters = parameter, { ",", parameter } ;
parameter = type, identifier ;
type = "int" | "byte" | "bool" | identifier ;
block = "{", statements, "}" ;

class_definition = "class", identifier, [ inheritance ], "{", class_body, "}" ;
inheritance = ":", identifier, { ",", identifier } ;
class_body = { class_member } ;
class_member = field | method | constructor | property ;

struct_definition = "struct", identifier, "{", struct_body, "}" ;
struct_body = { struct_member } ;
struct_member = field | method | constructor | property ;

interface_definition = "interface", identifier, "{", interface_body, "}" ;
interface_body = { interface_member } ;
interface_member = method_signature | property_signature ;

record_definition = "record", identifier, "{", record_body, "}" ;
record_body = { record_member } ;
record_member = field | method | constructor | property ;

array_declaration = type, identifier, "[", "]", { "[", "]" }, ";" ;
array_initialization = identifier, "=", "new", type, "[", expression, "]", { "[", expression, "]" }, ";" ;

list_declaration = "List", "<", type, ">", identifier, ";" ;
list_initialization = identifier, "=", "new", "List", "<", type, ">", "(", ")" , ";" ;

dictionary_declaration = "Dictionary", "<", type, ",", type, ">", identifier, ";" ;
dictionary_initialization = identifier, "=", "new", "Dictionary", "<", type, ",", type, ">", "(", ")" , ";" ;

lambda_expression = "(", [ parameter_list ], ")", "=>", expression ;

enum_definition = "enum", identifier, "{", enum_members, "}" ;
enum_members = identifier, { ",", identifier } ;
